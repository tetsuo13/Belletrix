@* Generator: Template TypeVisibility: Internal *@
@using System.Collections.Generic
@using System.Linq
@using StackExchange.Exceptional
@using StackExchange.Exceptional.Pages
@using StackExchange.Exceptional.Extensions
@inherits RazorPageBase
@{
    var log = ErrorStore.Default;
    var errors = new List<Error>();
    var total = log.GetAll(errors);
    errors = errors.OrderByDescending(e => e.CreationDate).ToList();
    
    Layout = new Master { PageTitle = "Error Log" };
}
@if (log.InFailureMode)
{
    var le = ErrorStore.LastRetryException;
        <div class="failure-mode">Error log is in failure mode, @ErrorStore.WriteQueue.Count @(ErrorStore.WriteQueue.Count == 1 ? "entry" : "entries") queued to log.@if(le != null){<text><br />Last Logging Exception: @le.Message</text>}</div>
    <!-- Exception Details:
    @if(ErrorStore.LastRetryException != null)
    {
        @ErrorStore.LastRetryException.Message
        @ErrorStore.LastRetryException.StackTrace
    }
     -->
}
@if (!errors.Any())
{
        <h1>No errors yet, yay!</h1>
}
else
{
        var last = errors.FirstOrDefault(); // oh the irony
        <h1 id="errorcount">@ErrorStore.ApplicationName - @total Errors; last @last.CreationDate.ToRelativeTime()</h1>
        <table id="ErrorLog" class="alt-rows">
            <thead>
                <tr>
                    <th class="type-col">&nbsp;</th>
                    <th class="type-col">Type</th>
                    <th>Error</th>
                    <th>Url</th>
                    <th>Remote IP</th>
                    <th>Time</th>
                    <th>Site</th>
                    <th>Server</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var e in errors)
            {
                var fullUrl = "http://" + e.Host + e.Url;
                <tr data-id="@e.GUID" class="error@(e.IsProtected ? " protected" : "")">
                    <td>
                        <a href="@Url("delete")" class="delete-link" title="Delete this error">&nbsp;X&nbsp;</a>
                        @if (!e.IsProtected)
                        {
                        <a href="@Url("protect")" class="protect-link" title="Protect this error">&nbsp;P&nbsp;</a>
                        }
                    </td>
                    <td class="type-col" title="@e.Type">@e.Type.ToShortException()</td>
                    <td class="error-col"><a href="@Url("info?guid="+@e.GUID)" class="info-link">@e.Message</a> 
                    @if(e.DuplicateCount > 1)
                    {
                        <span class="duplicate-count" title="number of similar errors occurring close to this error">(@e.DuplicateCount)</span>
                    }
                    </td>
                    <td>
                    @if (e.HTTPMethod == "GET" && e.Url.HasValue())
                    {
                        <a href="@fullUrl" title="@fullUrl" class="url-link">@e.Url.TruncateWithEllipsis(40)</a>
                    }
                    else if (e.Url.HasValue())
                    {
                        <span title="@fullUrl">@e.Url.TruncateWithEllipsis(40)</span>
                    }
                    </td>
                    <td>@e.IPAddress</td>
                    <td><span title="@(string.Format("{0:G} -- {1:u}", e.CreationDate, e.CreationDate.ToUniversalTime()))">@e.CreationDate.ToRelativeTime()</span></td>
                    <td>@e.Host</td>
                    <td>@e.MachineName</td>
                </tr>
            }
            </tbody>
        </table>
        if (errors.Any(e => !e.IsProtected))
        {
        <div class="clear-all-div">
            <a class="delete-link clear-all-link" href="@Url("delete-all")">&nbsp;X&nbsp;- Clear all non-protected errors</a>
        </div>
        }
}